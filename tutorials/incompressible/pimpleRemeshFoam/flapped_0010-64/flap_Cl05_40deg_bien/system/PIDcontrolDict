/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      PIDcontrolDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

PIDcontroller
{
    P               -0.6067;
    I               -9.921;
    D               3.036e-5;
    test yes;
    // Only required if resuming simulation after remeshing
    errorIntegral   0.0;
    errorDifferential 0.0;
    error 0.0;
    //


    controlDelay    0;
    T           1e-4; // Sampling period (should be T=dt in our sim)
    actuatorModelCoeffs
    {
        // Time in s
        // always rad or rad/s even for filter cutoff frequencies
        rolloff yes; // yes/no equivalent to true/false
        rolloffType firstOrderSimple; // secondOrderSimple butterworthSecond
        Tf      0.1; //Typically Td/10 from PID tuning
        saturate yes;
        angleMax        0.349066; //always in rad
        angleMin        -0.349066;
        omegaMax        0.7; // 40 deg/s
        omegaMin        -0.7;
    }

    controlTarget   1;
    controlledVarData
    {
        type            lforces;
        libs            ( lforces );
        patches         ( main flap );
        rho             rhoInf;
        rhoInf          1;
        CofR            ( 0.25 0 0 );
        liftDir         ( 0 1 0 );
        dragDir         ( 1 0 0 );
        pitchAxis       ( 0 0 1 );
        magUInf         1;
        lRef            1;
        Aref            1;
        direction       2;
        setPoint        0.5;
        initialValue    0;
    }

    PVfilter //Process Variable Filter (Noise Filter)
    {
        applyFilter yes;
        type           butterworth;
        wc          60; //always rad/s
        //functionObject  forceCoeffs;
        //fields          ( Cl Cd );
        //tolerance       0.001;
        window          0.05;
        //windowType      exact;
    }
}


// ************************************************************************* //
